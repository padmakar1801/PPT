import java.util.HashMap;

public class LongestHarmoniousSubsequence {
    public static int findLHS(int[] nums) {
        HashMap<Integer, Integer> frequencyMap = new HashMap<>();

        for (int num : nums) {
            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);
        }

        int maxSubsequenceLength = 0;

        for (int num : nums) {
            if (frequencyMap.containsKey(num + 1)) {
                int subsequenceLength = frequencyMap.get(num) + frequencyMap.get(num + 1);
                maxSubsequenceLength = Math.max(maxSubsequenceLength, subsequenceLength);
            }
        }

        return maxSubsequenceLength;
    }

    public static void main(String[] args) {
        int[] nums = {1, 3, 2, 2, 5, 2, 3, 7};
        int longestHarmoniousSubsequence = findLHS(nums);
        System.out.println(longestHarmoniousSubsequence); 
    }
}
