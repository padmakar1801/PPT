abstract class Vehicle {
    private String brand;
    private String model;

    public Vehicle(String brand, String model) {
        this.brand = brand;
        this.model = model;
    }

    public abstract void start();

    public abstract void stop();

    public String getBrand() {
        return brand;
    }

    public String getModel() {
        return model;
    }
}

class Car extends Vehicle {
    public Car(String brand, String model) {
        super(brand, model);
    }

    @Override
    public void start() {
        System.out.println("Starting the car.");
    }

    @Override
    public void stop() {
        System.out.println("Stopping the car.");
    }
}

class Motorcycle extends Vehicle {
    public Motorcycle(String brand, String model) {
        super(brand, model);
    }

    @Override
    public void start() {
        System.out.println("Starting the motorcycle.");
    }

    @Override
    public void stop() {
        System.out.println("Stopping the motorcycle.");
    }
}

public class AbstractionExample {
    public static void main(String[] args) {
        Vehicle car = new Car("Toyota", "Camry");
        car.start();
        car.stop();

        Vehicle motorcycle = new Motorcycle("Honda", "CBR");
        motorcycle.start();
        motorcycle.stop();
    }
}
